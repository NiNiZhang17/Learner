
程序的功能是：输入三角形的三边长a、b、c(约定为整数)，求三角形面积area，并输出。如果输入的三边构不成三角形，应给出“data error”的信息提示。注：根据“海伦－秦九韶”公式，area＝√p(p-a)(p-b)(p-c)，其中p＝(a+b+c)/2。

#include <math.h>
#include <stdio.h>

/* 本部分代码功能建议：函数原型声明 */
/******start******/
int  fun(int,int,int);
/******end******/

int main(void)
{   
	int aBian, bBian, cBian;
	double mJi;

	printf("\nplease input triange sides:");
	scanf("%d,%d,%d", &aBian, &bBian, &cBian);

	if (aBian<0 || bBian<0 || cBian<0
			|| (aBian+bBian <= cBian) || (aBian+cBian <= bBian) || (bBian+cBian <= aBian))
	{
		printf("\nOutput:\ndata error\n");
	}
	else
	{
		mJi = fun(aBian, bBian, cBian);
		printf("\nOutput:\narea=%.2f\n", mJi);
	}

	return 0;
}


/******start******/
int fun(int a,int b,int c)
{
	double p,area;
p=(a+b+c)/2;
area=sqrt(p*(p-a)*(p-b)*(p-c));
return area;
}

/******end******/


程序的功能是：先从键盘读入的8个学生的6门课成绩存放在二维数组student中(每一行存储一个学生的数据，第0列为学号，第1～6列依次为6门课的成绩)，再从键盘读入一个学号，在student查找该学生是否存在，若存在，则输出其平均成绩，若不存在，则显示“not Find!”。

#include<stdio.h>

#define NOT_FIND -1
#define TOTAL_STU 8

/* 函数aver的功能为：求学号为stuNo的学生的6门课课程之平均成绩，并通过函数值返回
		若未找到学生stuNo，则返回NOT_FIND */	
float aver(int (*pStu)[7], int stuNo);

int main(void)
{
	int student[TOTAL_STU][7]; /* the first column save student's number */
	float averScore;
	int i, j, stuNumber;

	printf("Input the %d student's number and score: \n", TOTAL_STU);
	/* 本部分代码功能建议：从键盘读入的8个学生的6门课成绩存放在二维数组student中 */	
	/******start******/
averScore=aver(student,stuNumber);
for(i=0;i<TOTAL_STU;i++)
	{
		
		for(j=0;j<7;j++)
			scanf("%d",&student[i][j]);	
	}

	/******end******/

	printf("Input a student's number to compute: ");
	scanf("%d", &stuNumber);

	averScore = aver(student, stuNumber);
	printf("Output:");
	if (NOT_FIND == averScore)
	{
		printf("\nstudent of No.%d not Find!\n", stuNumber);
	}
	else
	{
		printf("\nThe No.%d student's average is %.2f\n", stuNumber, averScore);
	}

	return 0;
}

/******start******/
float aver(int (*pStu)[7], int stuNo)
{
	int i,j;
	float sum=0;
	for(i=0;i<TOTAL_STU;i++)
		if(pStu[i][0]==stuNo)
		{
			for(j=1;j<7;j++)
				sum+=pStu[i][j];
			sum/=6;
			return sum;
		}
	return NOT_FIND;
}
/******end******/




写一个字符串反序的函数
#include <stdio.h>
#include <string.h>

/******start******/
void ReverseString(char str[]);

/******end******/

int main()
{
	char str[200]={0};
	printf("input a string: ");
	gets(str);

	ReverseString(str);

	puts("output:");
	puts(str);

	return 0;
}

/******start******/
void ReverseString(char str[])
{
char t;
int i,j;
for(i=0,j=strlen(str);i<(strlen(str)/2);i++,j--)
{
t=str[i];
str[i]=str[j-1];
str[j-1]=t;
}
}

/******end******/


p1=pro(m-1,n,x-1,y-1);
p2=pro(m,n-1,x-1,y);



程序运行时，先从键盘输入二个不相同的整数值，依次调用GetMax,GetMin,Getaverage函数获取二个数中的最大值，最小最，平均值，并保存到Result数组中。然后输出。注意：只允许在/******start******/和/******end******/之间添加代码。


#include <stdio.h>
#include <stdlib.h>

/******start******/
int GetMax(int x,int y);
int GetMin(int x,int y);
int GetAverage(int x,int y);	
/******end******/

int main()
{
	int Number1 = 0,Number2 = 0;
	int Result[3], i = 0;		//Result数组用来存存储的最大值，最小值和平均值
	printf("output:\ninput two numbers:\n");	

	scanf("%d %d", &Number1, &Number2);

	if(Number1 == Number2)
	{
		printf("输入二个不同的数字：\n");
		return 0;
	}

	/*在start和end之间完成函数的调用和参数的传递以及返回值的存储*/
	/******start******/
else 
{	
Result[0]=GetMax(Number1,Number2);
Result[1]=GetMin(Number1,Number2);
Result[2]=GetAverage(Number1,Number2);

}	




	/******end******/

	printf("\n最大数 最小数 平均值\n");
	for (i = 0; i < 3; i++)
	{
		printf("%6d", Result[i]);
	}
      
	printf("\n");
	return 0;
}

//取最大值函数
int GetMax(int x, int y)
{
	return (x > y) ? x : y;
}

//取最小值函数
int GetMin(int x, int y)
{
	return (x > y) ? y : x;
}

//取平均值函数
int GetAverage(int x, int y)
{
	return (x + y) / 2;
}





输出 1到n(12>=n>=1)的阶乘的值(要求利用静态局部变量相关的知识)。注意：只允许在/******start******/和/******end******/之间添加代码。


#include<stdio.h>
int main()
{
	int fac(int n);
	int i,m;
	printf("Please input m:");
	scanf("%d",&m);
	printf("Output:\n");
	for(i=1;i<=m;i++)
		printf("%d!=%d\n",i,fac(i));



}
int fac(int n)
{
static int f=1;
f=f*n;
return(f);
}
从键盘上读入一行字符(约定：字符数≤127字节)，判断其中的注释是否合法，不合法则报错，合法时则删除注释后再输出。合法注释是指“/*”标记注释开始、“*/”标记注释结束，通常表现为/* ……*/。
　　注意事项：
　　(1)只考虑行内最多只包含一个注释的情况。
　　(2)不合法的注释情况有很多种，例如 ……*/缺注释开始标记、/  * ……*/缺注释开始标记、/* ……缺注释结束标记、/* ……*  /缺结束标记。
　　(3)编程可用素材：printf("input a string:")...、printf("Output:\nThe result is :")...、printf("Output:\ncomment is error\n")...。
　　程序的运行效果应类似地如图1、图2、图3和图4所示，图1中的int main(void){char ch;/*ding yi*/ int i}、图2中的int main(void){char ch;ding yi*/ int i}、图3中的int main(void){char ch;/*ding yi* / int i}和图4中的int main(void){char ch; int i}是从键盘输入的内容。
>#include <stdio.h>
#include <string.h>

int findfirst(char str[128]);
int findlast(char str[128]);

int main(void)
{
	int first, last;
	char string[128];
	char result[128];

	printf("input a string:");
	gets(string);

	first = findfirst(string);
	last = findlast(string);

	strcpy(result, string);
	if (first >= 0 && last >= 0)
	{
		strcpy(result + first, string + last);
	}

	if (first >= 0 && last >= 0 && last >= first + 4 || first == -1 && last == -1)
	{
		printf("Output:\nThe result is :");
		puts(result);
	}
	else
	{
		printf("Output:\ncomment is error\n");
	}
	return 0;
}

int findfirst(char str[128])
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		if (str[i] == '/' && str[i + 1] == '*')
		{
			return i;
		}
	}
	return  (-1);
}

int findlast(char str[128])
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		if (str[i] == '*' && str[i + 1] == '/')
		{
			return i + 2;
		}
	}
	return (-1);
}











从键盘读入一行字符(约定：字符数≤127字节，其中的空格不固定、有多有少)和加密间隔(假定只输入正整数)，将加密后的文字输出。具体加密方法示例为：对于输入“1 2 3 4 5 6 7   8 9abcd ef ghiA  BCD  EFG HI XYZ”、加密间隔为9，先去掉输入中的空格后输出为：123456789abcdefghiABCDEFGHIXYZ，然后按间隔9分组：
#include <stdio.h>
#include <string.h>

void clearspace(char str[128]);
void prencode(char str[128], int encode);

int main(void)
{
	int encode;
	char str[128];

	printf("Input a string:");
	gets(str);
	printf("Input jiange:");
	scanf("%d", &encode);

	clearspace(str);
	printf("Output:\nThe string of deleted space:");
	puts(str);

	prencode(str, encode);
	return 0;
}

void clearspace(char str[128])
{
	int i, j;

	for (i = 0, j = 0; str[i] !='\0'; i++)
	{
		if (str[i] != ' ')
		{
			str[j] = str[i];
			j++;
		}
	}
	str[j] = '\0';
}

void prencode(char str[128], int encode)
{
	int i, j;
	int length;

	length = strlen(str);
	printf("The result is:");
	for (i = 0; i < encode; i++)
	{
		for (j = i; j < length; j += encode)
		{
			printf("%c", str[j]);
		}
		printf(" ");
	}
	printf("\n");
}







要求：不改变单词的顺序的情况下，将每一个单词翻转（单词倒序写）。输入中只有英文单词和空格（不含其它字符）。

如图：其中I am happy today是键盘输入的。
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void result(char str1[], char str2[]);
void revert(char st1[], char st2[]);

int main(void)
{
	char str[80], str1[80];

	printf("Input:\n");
	gets(str);
	result(str, str1);

	printf("Output:\n");
	puts(str1);
	return 0;
}

void result(char str1[], char str2[])
{
	int i = 0, j = 0, flag = 0;
	char st[80], st2[80];

	strcpy(str2, "");
	for (i = 0; str1[i] != '\0'; i++)
	{
		if (str1[i] != ' ')
		{
			flag = 1;
			st[j] = str1[i];
			j++;
		}
		if (str1[i] == ' ' && flag == 1)
		{
			flag = 0;
			st[j] = '\0';
			revert(st, st2);
			strcat(str2, st2);
			strcat(str2, " ");
			j = 0;
			continue;
		}
		if (str1[i] == ' ' && flag == 0)
		{
			strcat(str2, " ");
		}
	}
	st[j] = '\0';
	revert(st, st2);
	strcat(str2, st2);
}

void revert(char st1[], char st2[])
{
	int i;
	int n;

	n = strlen(st1);
	st2[n] = '\0';
	for (i = 0; st1[i] != '\0'; i++)
	{
		st2[n - 1 - i] = st1[i];
	}
}



